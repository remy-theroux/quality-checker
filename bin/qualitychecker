#!/usr/bin/env php
<?php

function includeIfExists($file)
{
    if (file_exists($file)) {
        return include $file;
    }
}

if ((!$loader = includeIfExists(__DIR__ . '/../vendor/autoload.php')) && (!$loader = includeIfExists(__DIR__ . '/../../../autoload.php'))) {
    fwrite(
        STDERR,
        'You must set up the project dependencies, run the following commands:' . PHP_EOL .
        'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
    exit(1);
}

use Doctrine\Common\Collections\ArrayCollection;

use QualityChecker\Configuration\ContainerFactory;

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Yaml\Yaml;

define('APP_DIR', __DIR__ . '/../');
define('CONFIG_PATH', APP_DIR . 'config/parameters.yml');

// @todo Add application version get from composer.json
$application = new Application();
$application->setName('php-cli quality-checker');

try {
    $container = ContainerFactory::compileConfiguration();

    $config = Yaml::parse(CONFIG_PATH);
    if ($config === CONFIG_PATH) {
        throw new ErrorException('The configuration file was not found. Aborting.');
    }

    $config = new ArrayCollection($config);
    $logDir = APP_DIR . $config->get('parameters')['log_dir'];
    if (!is_writable($logDir)) {
        throw new ErrorException('The logs directory is not writable. Aborting.');
    }

    /** @var \Monolog\Logger $logger */
    $logger = $container->get('logger');

    /** @var \QualityChecker\Task\TaskRunner $taskRunner */
    $taskRunner = $container->get('task_runner');

} catch (Exception $exception) {
    $application->renderException(
        $exception,
        new ConsoleOutput()
    );
    exit(-1);
}

$startCommand = new QualityChecker\Command\StartCommand($taskRunner, $logger);
$application->setDefaultCommand($startCommand->getName());
$application->add($startCommand);

$application->run();